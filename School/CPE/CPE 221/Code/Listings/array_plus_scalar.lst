


ARM Macro Assembler    Page 1 


    1 00000000         ;
    2 00000000         ; CPE 221 Assembly Example
    3 00000000         ; 
    4 00000000         ; This program adds a scalar value to all the elements i
                       n one
    5 00000000         ;      array and stores that in another array.
    6 00000000         ;
    7 00000000         ;int main()
    8 00000000         ;{
    9 00000000         ;  const int size = 8;
   10 00000000         ;  int x[size] = {13000, 298, -4729, 698, -2700, 5267, -
                       1, 32641};
   11 00000000         ;  int y[size];
   12 00000000         ;  int a = 239;
   13 00000000         ;  int i;
   14 00000000         ;  for (i = 0; i < size; i++)
   15 00000000         ;    y[i] = x[i] + a;
   16 00000000         ;}
   17 00000000         ;
   18 00000000                 AREA             ARRAY_PLUS_SCALAR, CODE, READWR
ITE
   19 00000000                 ENTRY
   20 00000000 E28F003C        ADR              r0, x       ; pointer to first 
                                                            element of x       
                                                                  (0)
   21 00000004 E28F1058        ADR              r1, y       ; pointer to first 
                                                            element of y       
                                                                  (4)
   22 00000008 E59F202C        LDR              r2, size    ; holds size of arr
                                                            ays                
                                                                  (8)
   23 0000000C E59F3070        LDR              r3, i       ; holds loop counte
                                                            r                  
                                                                 (12)
   24 00000010 E59F5028        LDR              r5, a       ; holds a          
                                                                               
                                                                 (16)
   25 00000014 E0534002 
                       loop    SUBS             r4, r3, r2  ; compute i - size 
                                                                               
                                                                 (20)
   26 00000018 5A000006        BPL              done        ; if i - size >= 0,
                                                             done              
                                                                 (24)
   27 0000001C E5904000        LDR              r4, [r0]    ; r4 = x[i]        
                                                                               
                                                                 (28)
   28 00000020 E0844005        ADD              r4, r4, r5  ; r4 = x[i] + a    
                                                                               
                                                                 (32)
   29 00000024 E5814000        STR              r4, [r1]    ; y[i] = x[i] + a  
                                                                               
                                                                 (36)
   30 00000028 E2800004        ADD              r0, r0, #4  ; update r0 to poin
                                                            t to next element o
                                                            f x  (40)
   31 0000002C E2811004        ADD              r1, r1, #4  ; update r1 to poin
                                                            t to next element o
                                                            f y  (44)



ARM Macro Assembler    Page 2 


   32 00000030 E2833001        ADD              r3, r3, #1  ; i++              
                                                                               
                                                                 (48)
   33 00000034 EAFFFFF6        B                loop        ;                  
                                                                               
                                                                 (52)
   34 00000038 EAFFFFFE 
                       done    B                done        ;                  
                                                                               
                                                                 (56)
   35 0000003C 00000008 
                       size    DCD              8           ;                  
                                                                               
                                                                 (60)
   36 00000040 000000EF 
                       a       DCD              239         ;                  
                                                                               
                                                                 (64)
   37 00000044         ; x has addresses                       (68-99)
   38 00000044 000032C8 
              0000012A 
              FFFFED87 
              000002BA 
              FFFFF574 
              00001493 
              FFFFFFFF 
              00007F81 x       DCD              13000, 298, -4729, 698, -2700, 
5267, -1, 32641
   39 00000064         ; y has addresses                     (100-131)
   40 00000064 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    y       SPACE            32
   41 00000084 00000000 
                       i       DCD              0           ; (132)
   42 00000088                 END
Command Line: --debug --xref --diag_suppress=9931 --bi --apcs=interwork --depen
d=.\objects\array_plus_scalar.d -o.\objects\array_plus_scalar.o -ID:\Keil_v5\AR
M\RV31\INC -ID:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefi
ne="__UVISION_VERSION SETA 529" --list=.\listings\array_plus_scalar.lst array_p
lus_scalar.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARRAY_PLUS_SCALAR 00000000

Symbol: ARRAY_PLUS_SCALAR
   Definitions
      At line 18 in file array_plus_scalar.asm
   Uses
      None
Comment: ARRAY_PLUS_SCALAR unused
a 00000040

Symbol: a
   Definitions
      At line 36 in file array_plus_scalar.asm
   Uses
      At line 24 in file array_plus_scalar.asm
Comment: a used once
done 00000038

Symbol: done
   Definitions
      At line 34 in file array_plus_scalar.asm
   Uses
      At line 26 in file array_plus_scalar.asm
      At line 34 in file array_plus_scalar.asm

i 00000084

Symbol: i
   Definitions
      At line 41 in file array_plus_scalar.asm
   Uses
      At line 23 in file array_plus_scalar.asm
Comment: i used once
loop 00000014

Symbol: loop
   Definitions
      At line 25 in file array_plus_scalar.asm
   Uses
      At line 33 in file array_plus_scalar.asm
Comment: loop used once
size 0000003C

Symbol: size
   Definitions
      At line 35 in file array_plus_scalar.asm
   Uses
      At line 22 in file array_plus_scalar.asm
Comment: size used once
x 00000044

Symbol: x
   Definitions
      At line 38 in file array_plus_scalar.asm
   Uses
      At line 20 in file array_plus_scalar.asm
Comment: x used once
y 00000064




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: y
   Definitions
      At line 40 in file array_plus_scalar.asm
   Uses
      At line 21 in file array_plus_scalar.asm
Comment: y used once
8 symbols
340 symbols in table
