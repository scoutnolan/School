#include "global.h"
#include "ui_gamewindow.h"
#include <QGraphicsView>
#include <QGraphicsScene>
#include <QList>

extern int PlayerCount;
extern int myID;
// Want to send the position of the host and client.
Stick::gamewindow::gamewindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::gamewindow)
{
    ui->setupUi(this);

    XMAX = 700;
    YMAX = 500;
    connect(ui->OkButton, SIGNAL(clicked()), this, SLOT(CloseGame()));  //allows players to leave game (for now)
    //connect(ui->Leaderboard, SIGNAL(clicked()), this, SLOT(Leaderboard()));
    ui->OkButton->setFocusPolicy(Qt::NoFocus);

    scene = new QGraphicsScene(0, 0, XMAX, YMAX, this);
    scene->setBackgroundBrush(QBrush(Qt::black, Qt::SolidPattern));
    scene->setItemIndexMethod(QGraphicsScene::NoIndex);
    ui->backGround->setScene(scene);

//    QGraphicsRectItem* arena = new QGraphicsRectItem;
//    arena->setRect(0, 0, XMAX + 10, YMAX + 20);
//    arena->setBrush((QBrush(Qt::gray, Qt::DiagCrossPattern)));
//    scene->addItem(arena);

    ui->playerOneHealth->setText("No Player One");
    ui->playerTwoHealth->setText("No Player Two");
    ui->playerThreeHealth->setText("No Player Three");
    ui->playerFourHealth->setText("No Player Four");
    ui->playerFiveHealth->setText("No Player Five");

    int spawnX = 0;
    int spawnY = 0;

    qDebug() << "test" << PlayerCount;

    if(PlayerCount >= 2)
    {
        player = new character(spawnX, spawnY, 20, 20);
        ui->playerOneHealth->setText("Player 1: 5");;
        player->setPos(playerOneSpawnX,playerOneSpawnY);
        player->setPen(QPen(Qt::blue));
        player->setBrush(QBrush(Qt::blue));
        //        iter += 4;

        player2 = new character(spawnX, spawnY, 20, 20);
        ui->playerTwoHealth->setText("Player 2: 5");
        player2->setPos(playerTwoSpawnX,playerTwoSpawnY);
        player2->setPen(QPen(Qt::red));
        player2->setBrush(QBrush(Qt::red));
    //        iter += 4;

        scene->addItem(player);
        scene->addItem(player2);
        qDebug() << "Setting up players" << endl;
    }
    if(PlayerCount >= 3)
    {
        player3 = new character(spawnX, spawnY, 20, 20);
        ui->playerThreeHealth->setText("Player 3: 5");
        player3->setPos(playerThreeSpawnX,playerThreeSpawnY);
        player3->setPen(QPen(Qt::green));
        player3->setBrush(QBrush(Qt::green));
        scene->addItem(player3);
    //        iter += 4;
    }
    if(PlayerCount >= 4)
    {
        player4 = new character(spawnX, spawnY, 20, 20);
        ui->playerFourHealth->setText("Player 4: 5");
        player4->setPos(playerFourSpawnX,playerFourSpawnY);
        player4->setPen(QPen(Qt::yellow));
        player4->setBrush(QBrush(Qt::yellow));
        scene->addItem(player4);
        //iter += 4;
    }
    if(PlayerCount >= 5)
    {
        player5 = new character(spawnX, spawnY, 20, 20);
        ui->playerFiveHealth->setText("Player 5: 5");
        player5->setPos(playerFiveSpawnX,playerFiveSpawnY);
        player5->setPen(QPen(Qt::magenta));
        player5->setBrush(QBrush(Qt::magenta));
        scene->addItem(player5);
        //iter += 4;
    }

    //attackCircle = new QGraphicsEllipseItem(player->scenePos().x(),player->scenePos().y(),20,20);
    QMainWindow::setWindowModality(Qt::ApplicationModal);
}


void Stick::gamewindow::CloseGame()
{
    close();
}

Stick::gamewindow::~gamewindow()
{
    delete ui;
}

void Stick::gamewindow::keyPressEvent(QKeyEvent* event)     //determines what function to call (move, attack, etc)
{
    QMainWindow::setFocusPolicy(Qt::StrongFocus);
    startTimer(400/10);
    keys[event->key()] = true; QMainWindow::keyPressEvent(event);
 /*   if(event && (event->key() == Qt::Key_W))
    {
            lastKeyvent = event->key();
            moveUp(player);
            QMainWindow::keyPressEvent(event);
    }
    else if(event && (event->key() == Qt::Key_A))
    {
            lastKeyvent = event->key();
            moveLeft(player);
            QMainWindow::kemoveUp(player);yPressEvent(event);
    }
    else if(event && (event->key() == Qt::Key_S))
    {
            lastKeyvent = event->key();
            moveDown(player);
            QMainWindow::keyPressEvent(event);
    }
    else if(event && (event->key() == Qt::Key_D))
    {
            lastKeyvent = event->key();
            moveRight(player);
            QMainWindow::keyPressEvent(event);
    }
    else if(event && (event->key() == Qt::Key_P))
        {
                Attack();
                QMainWindow::keyPressEvent(event);
        }
    else if(event && (event->key() == Qt::Key_Space))
        {
                dodge(lastKeyvent);
                QMainWindow::keyPressEvent(event);
        }
    qDebug() << "interrupts" << endl;*/
}

void Stick::gamewindow::keyReleaseEvent(QKeyEvent* event)     //determines what function to call (move, attack, etc)
{
    QMainWindow::setFocusPolicy(Qt::StrongFocus);
    startTimer(400/10);
    keys[event->key()] = false; QMainWindow::keyReleaseEvent(event);
//    if(event && (event->key() == Qt::Key_W))
//    {
//            moveUp(player);
//            QMainWindow::keyReleaseEvent(event);
//    }
//    else if(event && (event->key() == Qt::Key_A))
//    {
//            moveLeft(player);
//            QMainWindow::keyReleaseEvent(event);
//    }
//    else if(event && (event->key() == Qt::Key_S))
//    {
//            moveDown(player);
//            QMainWindow::keyReleaseEvent(event);
//    }
//    else if(event && (event->key() == Qt::Key_D))
//    {
//            moveRight(player);
//            QMainWindow::keyReleaseEvent(event);
//    }
}

void Stick::gamewindow::timerEvent(QTimerEvent *)
{
    if(keys[Qt::Key_W])
    {
        if(myID == 0)
        {
            moveUp(player);
            SendXYPos(0, player->x(), player->y());
        }
        if(myID == 1)
        {
            moveUp(player2);
            SendXYPos(1, player2->x(), player2->y());
        }
        if(myID == 2)
        {
            moveUp(player3);
            SendXYPos(2, player3->x(), player3->y());
        }
        if(myID == 3)
        {
            moveUp(player4);
            SendXYPos(3, player4->x(), player4->y());
        }
        if(myID == 4)
        {
            moveUp(player5);
            SendXYPos(4, player5->x(), player5->y());
        }
    }

    if(keys[Qt::Key_A])
    {
        if(myID == 0)
        {
            moveLeft(player);
            SendXYPos(0, player->x(), player->y());
        }
        if(myID == 1)
        {
            moveLeft(player2);
            SendXYPos(1, player2->x(), player2->y());
        }
        if(myID == 2)
        {
            moveLeft(player3);
            SendXYPos(2, player3->x(), player3->y());
        }
        if(myID == 3)
        {
            moveLeft(player4);
            SendXYPos(3, player4->x(), player4->y());
        }
        if(myID == 4)
        {
            moveLeft(player5);
            SendXYPos(4, player5->x(), player5->y());
        }
    }
    if(keys[Qt::Key_D])
    {
        if(myID == 0)
        {
            moveRight(player);
            SendXYPos(0, player->x(), player->y());
        }
        if(myID == 1)
        {
            moveRight(player2);
            SendXYPos(1, player2->x(), player2->y());
        }
        if(myID == 2)
        {
            moveRight(player3);
            SendXYPos(2, player3->x(), player3->y());
        }
        if(myID == 3)
        {
            moveRight(player4);
            SendXYPos(3, player4->x(), player4->y());
        }
        if(myID == 4)
        {
            moveRight(player5);
            SendXYPos(4, player5->x(), player5->y());
        }
    }

    if(keys[Qt::Key_S])
    {
        if(myID == 0)
        {
            moveDown(player);
            SendXYPos(0, player->x(), player->y());
        }
        if(myID == 1)
        {
            moveDown(player2);
            SendXYPos(1, player2->x(), player2->y());
        }
        if(myID == 2)
        {
            moveDown(player3);
            SendXYPos(2, player3->x(), player3->y());
        }
        if(myID == 3)
        {
            moveDown(player4);
            SendXYPos(3, player4->x(), player4->y());
        }
        if(myID == 4)
        {
            moveDown(player5);
            SendXYPos(4, player5->x(), player5->y());
        }
    }

    if(keys[Qt::Key_P])
    {
        Attack();
    }
    if(keys[Qt::Key_Space])
    {
        dodge();
    }
}

void Stick::gamewindow::SendXYPos(int ID, qreal x, qreal y)
{
    QByteArray out;
    QTextStream outData(&out, QIODevice::WriteOnly);
    outData << static_cast<int>(Message::Moved) << endl << ID << x << endl << y << endl;
    Stick::Hwindow server;
    server.sendtoClients(out);
}

void Stick::gamewindow::UpdatePositionNew(int ID, int x, int y)
{
    if(ID == 0)
    {
        player->setPos(x, y);
    }
    if(ID == 1)
    {
        player2->setPos(x, y);
    }
    if(ID == 2)
    {
        player3->setPos(x, y);
    }
    if(ID == 3)
    {
        player4->setPos(x, y);
    }
    if(ID == 4)
    {
        player5->setPos(x, y);
    }
}

void Stick::gamewindow::UpdatePositionClient(int ID, int x, int y) {

    if(ID == 0)
    {
        player->setPos(x, y);
    }
    if(ID == 1)
    {
        player2->setPos(x, y);
    }
    if(ID == 2)
    {
        player3->setPos(x, y);
    }
    if(ID == 3)
    {
        player4->setPos(x, y);
    }
    if(ID == 4)
    {
        player5->setPos(x, y);
    }
}


void Stick::gamewindow::moveLeft(QGraphicsRectItem* person)
{
if(person->scenePos().x() > 0)
        {
                person->setPos(person->scenePos().x() - mSpeed, person->scenePos().y());
                {mSpeed = 0.05;}
        }
}

void Stick::gamewindow::moveRight(QGraphicsRectItem* person )
{
        if(person->scenePos().x() < XMAX)
        {
                person->setPos(person->scenePos().x() + mSpeed, person->scenePos().y());
                {mSpeed = 0.05;}
        }
}

void Stick::gamewindow::moveUp(QGraphicsRectItem* person)
{
        if(person->scenePos().y() > 0)
        {
                person->setPos(person->scenePos().x(), person->scenePos().y() - mSpeed);
                //if(mSpeed > 0.1)
                {mSpeed = 0.05;}
        }
}

void Stick::gamewindow::moveDown(QGraphicsRectItem* person)
{
if(person->scenePos().y() < YMAX)
        {
                person->setPos(person->scenePos().x(), person->scenePos().y() + mSpeed);
                //if(mSpeed > 0.1)
                {mSpeed = 0.05;}
        }
}

void Stick::gamewindow::Attack()
{
   if(attackEnabed == 1)
   {
       attackEnabed = 0;
       collision = 0;
       attackCircle = new QGraphicsEllipseItem(player->scenePos().x()-5,player->scenePos().y()-5,30,30);
       attackCircle->setPen(QPen(Qt::red));
       attackCircle->setBrush(QBrush(Qt::red));
       //scene->removeItem(player);
       scene->addItem(attackCircle);
       delay();
       if(playerCount >= 2)
       {
           if(!scene->collidingItems(player2).isEmpty())
           {
               hit = 1;
               respawn(player2);
           }
       }
       else if(playerCount >= 3)
       {
           if(!scene->collidingItems(player3).isEmpty())
           {
               hit = 1;
               respawn(player3);
           }
       }
       else if(playerCount >= 4)
       {
           if(!scene->collidingItems(player4).isEmpty())
           {
               hit = 1;
               respawn(player4);
           }
       }
       else if(playerCount >= 5)
       {
           if(!scene->collidingItems(player5).isEmpty())
           {
               hit = 1;
               respawn(player5);
           }
       }
       else
       {
           hit = 0;
       }
       qDebug()  << hit;
       scene->removeItem(attackCircle);
       attackEnabed = 1;
       //scene->addItem(player);
       collision = 1;
   }
}

void Stick::gamewindow::delay()
{
    QTime dieTime= QTime::currentTime().addSecs(1);
    while (QTime::currentTime() < dieTime)
        QCoreApplication::processEvents(QEventLoop::AllEvents, 100);
}

void Stick::gamewindow::respawn(QGraphicsRectItem* p)
{
    scene->removeItem(p);

    if(p == player)
    {
       p->setPos(playerOneSpawnX,playerOneSpawnY);
       if(ui->playerOneHealth->text() == "Player 1: 5")
       {
           ui->playerOneHealth->setText("Player 1: 4");
       }
       else if(ui->playerOneHealth->text() == "Player 1: 4")
       {
           ui->playerOneHealth->setText("Player 1: 3");
       }
       else if(ui->playerOneHealth->text() == "Player 1: 3")
       {
           ui->playerOneHealth->setText("Player 1: 2");
       }
       else if(ui->playerOneHealth->text() == "Player 1: 2")
       {
           ui->playerOneHealth->setText("Player 1: 1");
       }
       else
       {
           ui->playerOneHealth->setText("Player 1: Dead");
           return;
       }
    }
    else if(p == player2)
    {
       p->setPos(playerTwoSpawnX,playerTwoSpawnY);
       if(ui->playerTwoHealth->text() == "Player 2: 5")
       {
           ui->playerTwoHealth->setText("Player 2: 4");
       }
       else if(ui->playerTwoHealth->text() == "Player 2: 4")
       {
           ui->playerTwoHealth->setText("Player 2: 3");
       }
       else if(ui->playerTwoHealth->text() == "Player 2: 3")
       {
           ui->playerTwoHealth->setText("Player 2: 2");
       }
       else if(ui->playerTwoHealth->text() == "Player 2: 2")
       {
           ui->playerTwoHealth->setText("Player 2: 1");
       }
       else
       {
           ui->playerTwoHealth->setText("Player 2: Dead");
           return;
       }
    }
    else if(p == player3)
    {
       p->setPos(playerThreeSpawnX,playerThreeSpawnY);
       if(ui->playerThreeHealth->text() == "Player 3: 5")
       {
           ui->playerThreeHealth->setText("Player 3: 4");
       }
       else if(ui->playerThreeHealth->text() == "Player 3: 4")
       {
           ui->playerThreeHealth->setText("Player 3: 3");
       }
       else if(ui->playerThreeHealth->text() == "Player 3: 3")
       {
           ui->playerThreeHealth->setText("Player 3: 2");
       }
       else if(ui->playerThreeHealth->text() == "Player 3: 2")
       {
           ui->playerThreeHealth->setText("Player 3: 1");
       }
       else
       {
           ui->playerThreeHealth->setText("Player 3: Dead");
           return;
       }
    }
    else if(p == player4)
    {
       p->setPos(playerFourSpawnX,playerFourSpawnY);
       if(ui->playerFourHealth->text() == "Player 4: 5")
       {
           ui->playerFourHealth->setText("Player 4: 4");
       }
       else if(ui->playerFourHealth->text() == "Player 4: 4")
       {
           ui->playerFourHealth->setText("Player 4: 3");
       }
       else if(ui->playerFourHealth->text() == "Player 4: 3")
       {
           ui->playerFourHealth->setText("Player 4: 2");
       }
       else if(ui->playerFourHealth->text() == "Player 4: 2")
       {
           ui->playerFourHealth->setText("Player 4: 1");
       }
       else
       {
           ui->playerFourHealth->setText("Player 4: Dead");
           return;
       }
    }
    else if(p == player5)
    {
       p->setPos(playerFiveSpawnX,playerFiveSpawnY);
       if(ui->playerFiveHealth->text() == "Player 5: 5")
       {
           ui->playerFiveHealth->setText("Player 5: 4");
       }
       else if(ui->playerFiveHealth->text() == "Player 5: 4")
       {
           ui->playerFiveHealth->setText("Player 5: 3");
       }
       else if(ui->playerFiveHealth->text() == "Player 5: 3")
       {
           ui->playerFiveHealth->setText("Player 5: 2");
       }
       else if(ui->playerFiveHealth->text() == "Player 5: 2")
       {
           ui->playerFiveHealth->setText("Player 5: 1");
       }
       else
       {
           ui->playerFiveHealth->setText("Player 5: Dead");
           return;
       }
    }
    scene->addItem(p);
}

void Stick::gamewindow::dodge()
{
    this->mSpeed = 0.1;
}


void Stick::gamewindow::dodgeCooldown()
{

}

void Stick::gamewindow::getPlayerPos()
{

}

void Stick::gamewindow::getPNum(int number)
{
    playerCount = number;
    contSetup();
}

void Stick::gamewindow::contSetup()
{

}


void Stick::gamewindow::Leaderboard()
{
    MyLWindow = new Lwindow();
    MyLWindow -> show();
}






