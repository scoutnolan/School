module SevenA(input data_in, clk, reset, output data_out)
input clk, data_in, reset;
output reg [1:0] data_out;
reg [1:0] state;
parameter S0 = 0, S1 = 1, S2 = 2, S3 = 3, S4 = 4, S5 = 5;

always @(posedge clk or posedge reset)
	begin
		if(reset) 
			state <= S0;
		else
			case(state)
				S0: 
					if(data_in)
						state <= S2;
					else
						state <= S5;
					end
				S1: 
					if(data_in)    			
						state <= S3;
					else
						state <= S4;
					end
				S2: 
					if(data_in)
						state <= S0;
					else
						state <= S1;
					end
				S3: 
					if(data_in)
						state <= S0;
					else
						state <= S2;
					end
				S4: 
					if(data_in)
						state <= S2;
					else
						state <= S1;
					end
				S5: 
					if(data_in)
						state <= S3;
					else
						state <= S4;
					end
				default: state <= S0;
			endcase
		end
	end

always @(state)
	begin
		case(state)
			S0: 
				if(data_in)
					data_out = 2b'00;
				else
					data_out = 2b'00;
				end			
			S1: 
				if(data_in)    
					data_out = 2b'00;
				else
					data_out = 2b'01;
				end				
			S2: 
				if(data_in)
					data_out = 2b'01;
				else
					data_out = 2b'00;
				end			
			S3: 
				if(data_in)
					data_out = 2b'01;
				else
					data_out = 2b'01;
				end			
			S4: 
				if(data_in)
					data_out = 2b'00;
				else
					data_out = 2b'00;
				end			
			S5: 
				if(data_in)
					data_out = 2b'00;
				else
					data_out = 2b'01;
				end			
		endcase
	end
endmodule