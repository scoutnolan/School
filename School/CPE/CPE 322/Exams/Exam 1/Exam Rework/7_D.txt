module SevenD(input X, CLK, output Z)begin
reg [1:0] state;
reg [1:0] next_state;
parameter S0 = 2'd0, S1 = 2'd1, S2 = 2'd2, S3 = 2'd3;

always @(X, state) 
begin
	case(state)
		S0: 
            if(X)
                Z = 2b'00;
			else
				Z = 2b'00;
			end    
		S1: 
            if(X)
                Z = 2b'00;
			else
				Z = 2b'00;
			end   		
		S2: 
            if(X)
                Z = 2b'00;
			else
				Z = 2b'00;
			end   
		S3: 
            if(X)
                Z = 2b'01;
			else
				Z = 2b'00;
			end
	endcase   
end

always @(posedgeCLK) 
begin
	case(state)
		S0: 
			if(X)
				next_state = S0;
			else
				next_state = S1;
			end			  
		S1: 
			if(X)
				next_state = S2;
			else
				next_state = S1;
			end		  
		S2: 
			if(X)
				next_state = S0;
			else
				next_state = S3;
			end		  
		S3: 
			if(X)
				next_state == S2;
			else
				next_state == S1;
			end
	endcase
end

endmodule


